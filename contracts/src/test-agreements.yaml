jobs:

# Libraries
- name: ErrorsLib
  deploy:
    contract: ErrorsLib.bin

- name: TypeUtilsLib
  deploy:
    contract: TypeUtilsLib.bin

- name: ArrayUtilsLib
  deploy:
    contract: ArrayUtilsLib.bin

- name: MappingsLib
  deploy:
    contract: MappingsLib.bin
    libraries: TypeUtilsLib:$TypeUtilsLib, ArrayUtilsLib:$ArrayUtilsLib

- name: DataStorageUtils
  deploy:
    contract: DataStorageUtils.bin
    libraries: ErrorsLib:$ErrorsLib, MappingsLib:$MappingsLib, TypeUtilsLib:$TypeUtilsLib

- name: ERC165Utils
  deploy:
    contract: ERC165Utils.bin

- name: BpmModelLib
  deploy:
    contract: bpm-model/BpmModelLib.sol
    libraries: ErrorsLib:$ErrorsLib, DataStorageUtils:$DataStorageUtils

- name: BpmRuntimeLib
  deploy:
    contract: bpm-runtime/BpmRuntimeLib.sol
    instance: BpmRuntimeLib
    libraries: ErrorsLib:$ErrorsLib, TypeUtilsLib:$TypeUtilsLib, ArrayUtilsLib:$ArrayUtilsLib, MappingsLib:$MappingsLib, ERC165Utils:$ERC165Utils

- name: AgreementsAPI
  deploy:
    contract: AgreementsAPI.bin
    libraries: ERC165Utils:$ERC165Utils

- name: IsoCountries
  deploy:
    contract: IsoCountries100.bin
    instance: IsoCountries100
    libraries: ErrorsLib:$ErrorsLib


# ArchetypeRegistryTest
- name: ArchetypeRegistryTest
  deploy:
    contract: ArchetypeRegistryTest.bin
    instance: ArchetypeRegistryTest
    libraries: ErrorsLib:$ErrorsLib, ArrayUtilsLib:$ArrayUtilsLib, TypeUtilsLib:$TypeUtilsLib, MappingsLib:$MappingsLib, ERC165Utils:$ERC165Utils
    data: [$IsoCountries]

- name: testArchetypeCreation
  call:
    destination: $ArchetypeRegistryTest
    bin: ArchetypeRegistryTest
    function: testArchetypeCreation

- name: assertArchetypeCreation
  assert:
    key: $testArchetypeCreation
    relation: eq
    val: success

- name: testArchetypePackages
  call:
    destination: $ArchetypeRegistryTest
    bin: ArchetypeRegistryTest
    function: testArchetypePackages

- name: assertArchetypePackages
  assert:
    key: $testArchetypePackages
    relation: eq
    val: success

- name: testArchetypeSuccessor
  call:
    destination: $ArchetypeRegistryTest
    bin: ArchetypeRegistryTest
    function: testArchetypeSuccessor

- name: assertArchetypeSuccessor
  assert:
    key: $testArchetypeSuccessor
    relation: eq
    val: success

- name: testGoverningArchetypes
  call:
    destination: $ArchetypeRegistryTest
    bin: ArchetypeRegistryTest
    function: testGoverningArchetypes

- name: assertGoverningArchetypes
  assert:
    key: $testGoverningArchetypes
    relation: eq
    val: success


# ActiveAgreementTest
- name: ActiveAgreementTest
  deploy:
    contract: ActiveAgreementTest.bin
    instance: ActiveAgreementTest
    libraries: ErrorsLib:$ErrorsLib, ArrayUtilsLib:$ArrayUtilsLib, TypeUtilsLib:$TypeUtilsLib, MappingsLib:$MappingsLib, DataStorageUtils:$DataStorageUtils, ERC165Utils:$ERC165Utils, AgreementsAPI:$AgreementsAPI

- name: testActiveAgreementSetup
  call:
    destination: $ActiveAgreementTest
    bin: ActiveAgreementTest
    function: testActiveAgreementSetup

- name: assertActiveAgreementSetup
  assert:
    key: $testActiveAgreementSetup
    relation: eq
    val: success

- name: testLegalStateChangeValidation
  call:
    destination: $ActiveAgreementTest
    bin: ActiveAgreementTest
    function: testLegalStateChangeValidation

- name: assertLegalStateChangeValidation
  assert:
    key: $testLegalStateChangeValidation
    relation: eq
    val: success

- name: testActiveAgreementSigning
  call:
    destination: $ActiveAgreementTest
    bin: ActiveAgreementTest
    function: testActiveAgreementSigning

- name: assertActiveAgreementSigning
  assert:
    key: $testActiveAgreementSigning
    relation: eq
    val: success

- name: testActiveAgreementCancellation
  call:
    destination: $ActiveAgreementTest
    bin: ActiveAgreementTest
    function: testActiveAgreementCancellation

- name: assertActiveAgreementCancellation
  assert:
    key: $testActiveAgreementCancellation
    relation: eq
    val: success


# ActiveAgreementRegistryTest
- name: ActiveAgreementRegistryTest
  deploy:
    contract: ActiveAgreementRegistryTest.bin
    instance: ActiveAgreementRegistryTest
    libraries: ErrorsLib:$ErrorsLib, ArrayUtilsLib:$ArrayUtilsLib, TypeUtilsLib:$TypeUtilsLib, MappingsLib:$MappingsLib, BpmRuntimeLib:$BpmRuntimeLib, DataStorageUtils:$DataStorageUtils, ERC165Utils:$ERC165Utils, AgreementsAPI:$AgreementsAPI

- name: testActiveAgreementRegistry
  call:
    destination: $ActiveAgreementRegistryTest
    bin: ActiveAgreementRegistryTest
    function: testActiveAgreementRegistry

- name: assertActiveAgreementRegistry
  assert:
    key: $testActiveAgreementRegistry
    relation: eq
    val: success

- name: testAgreementCollections
  call:
    destination: $ActiveAgreementRegistryTest
    bin: ActiveAgreementRegistryTest
    function: testAgreementCollections

- name: assertAgreementCollections
  assert:
    key: $testAgreementCollections
    relation: eq
    val: success

- name: testGoverningAgreements
  call:
    destination: $ActiveAgreementRegistryTest
    bin: ActiveAgreementRegistryTest
    function: testGoverningAgreements

- name: assertGoverningAgreements
  assert:
    key: $testGoverningAgreements
    relation: eq
    val: success

#####
# ActiveAgreementWorkflowTest
########################################################################

# START temporary external setup of services needed for the ActiveAgreementWorkflowTest to avoid the binary footprint of the test contract to get too large
- name: ArchetypeRegistry
  deploy:
    contract: DefaultArchetypeRegistry.bin
    libraries: ErrorsLib:$ErrorsLib, ArrayUtilsLib:$ArrayUtilsLib, MappingsLib:$MappingsLib

- name: ArchetypeRegistryDb
  deploy:
    contract: ArchetypeRegistryDb.bin
    libraries: ErrorsLib:$ErrorsLib, ArrayUtilsLib:$ArrayUtilsLib, MappingsLib:$MappingsLib

- name: ChangeArchetypeRegistryDbOwnership
  call:
    destination: $ArchetypeRegistryDb
    bin: ArchetypeRegistryDb
    function: transferSystemOwnership
    data: [$ArchetypeRegistry]

- name: SetArchetypeRegistryDb
  call:
    destination: $ArchetypeRegistry
    bin: DefaultArchetypeRegistry
    function: acceptDatabase
    data: [$ArchetypeRegistryDb]

- name: AssertArchetypeRegistryDb
  assert:
    key: $SetArchetypeRegistryDb
    relation: eq
    val: "true"

- name: ApplicationRegistry
  deploy:
    contract: DefaultApplicationRegistry.bin
    libraries: ErrorsLib:$ErrorsLib

- name: ApplicationRegistryDb
  deploy:
    contract: ApplicationRegistryDb.bin
    libraries: ErrorsLib:$ErrorsLib

- name: ChangeAppRegistryDbOwnership
  call:
    destination: $ApplicationRegistryDb
    bin: ApplicationRegistryDb
    function: transferSystemOwnership
    data: [$ApplicationRegistry]

- name: SetApplicationRegistryDb
  call:
    destination: $ApplicationRegistry
    bin: DefaultApplicationRegistry
    function: acceptDatabase
    data: [$ApplicationRegistryDb]

- name: AssertApplicationRegistryDb
  assert:
    key: $SetApplicationRegistryDb
    relation: eq
    val: "true"
# STOP temporary external set of services

- name: ActiveAgreementWorkflowTest
  deploy:
    contract: ActiveAgreementWorkflowTest.bin
    instance: ActiveAgreementWorkflowTest
    libraries: ErrorsLib:$ErrorsLib, ArrayUtilsLib:$ArrayUtilsLib, TypeUtilsLib:$TypeUtilsLib, MappingsLib:$MappingsLib, BpmModelLib:$BpmModelLib, BpmRuntimeLib:$BpmRuntimeLib, DataStorageUtils:$DataStorageUtils, ERC165Utils:$ERC165Utils, AgreementsAPI:$AgreementsAPI
    data: [$ArchetypeRegistry, $ApplicationRegistry]

- name: testAddressScopeTransfer
  call:
    destination: $ActiveAgreementWorkflowTest
    bin: ActiveAgreementWorkflowTest
    function: testAddressScopeTransfer

- name: assertAddressScopeTransfer
  assert:
    key: $testAddressScopeTransfer
    relation: eq
    val: success

- name: testAgreementProcessLifecycle
  call:
    destination: $ActiveAgreementWorkflowTest
    bin: ActiveAgreementWorkflowTest
    function: testAgreementProcessLifecycle

- name: assertAgreementProcessLifecycle
  assert:
    key: $testAgreementProcessLifecycle
    relation: eq
    val: success

- name: testExecutedAgreementWorkflow
  call:
    destination: $ActiveAgreementWorkflowTest
    bin: ActiveAgreementWorkflowTest
    function: testExecutedAgreementWorkflow

- name: assertExecutedAgreementWorkflow
  assert:
    key: $testExecutedAgreementWorkflow
    relation: eq
    val: success

- name: testCanceledAgreementWorkflow
  call:
    destination: $ActiveAgreementWorkflowTest
    bin: ActiveAgreementWorkflowTest
    function: testCanceledAgreementWorkflow

- name: assertCanceledAgreementWorkflow
  assert:
    key: $testCanceledAgreementWorkflow
    relation: eq
    val: success
